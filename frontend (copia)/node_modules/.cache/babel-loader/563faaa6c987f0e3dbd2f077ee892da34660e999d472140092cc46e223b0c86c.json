{"ast":null,"code":"/* Funciones auxiliares para manejar los ejercicios */\n\nimport axios from \"axios\";\nconst serverRoot = process.env.REACT_APP_BACKEND_URL;\n\n/* f para recuperar todos los ejercicios del server */\nexport const getExercisesService = async () => {\n  try {\n    const response = await axios.get(`${serverRoot}/exercises`);\n\n    // desestructurar respuesta ; axios incluye varias anidaciones de objetos, por defecto uno llamada \"data\"; el backend tmb devuelve un {data};\n    const {\n      data\n    } = response;\n    const {\n      data: serverData\n    } = data;\n    const {\n      exercises\n    } = serverData;\n\n    // devolver array de objetos tipo ejercicio\n    return exercises;\n  } catch (e) {\n    console.error(e);\n    console.log(e.response.data);\n    return alert(`${e.response.data.status}: ${e.response.data.message}`);\n  }\n};\n\n/* f para recuperar un ejercicio particular del server mediante path param */\nexport const getExerciseByIdService = async id => {\n  try {\n    const response = await axios.get(`${serverRoot}/exercises/${id}`);\n\n    // desestructurar respuesta ; axios incluye varias anidaciones de objetos, por defecto uno llamada \"data\"; el backend tmb devuelve un {data};\n    const {\n      data\n    } = response;\n    const {\n      data: exercise\n    } = data;\n\n    // devolver objeto tipo ejercicio\n    return exercise;\n  } catch (e) {\n    console.error(e);\n    console.log(e.response.data);\n    alert(`${e.response.data.status}: ${e.response.data.message}`);\n  }\n};\n\n/* f para grabar nuevo ejercicio en server */\nexport const postNewExerciseService = async _ref => {\n  let {\n    name,\n    typology,\n    description,\n    muscles,\n    picture\n  } = _ref;\n  try {\n    const formData = new FormData();\n    formData.append(\"name\", name);\n    formData.append(\"typology\", typology);\n    formData.append(\"description\", description);\n    formData.append(\"muscles\", muscles);\n    formData.append(\"picture\", picture);\n    await axios.post(`${serverRoot}/newExercise`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n  } catch (e) {\n    console.error(e.message);\n    console.log(e.response.data);\n    return alert(`${e.response.data.status}: ${e.response.data.message}`);\n  }\n};","map":{"version":3,"names":["axios","serverRoot","process","env","REACT_APP_BACKEND_URL","getExercisesService","response","get","data","serverData","exercises","e","console","error","log","alert","status","message","getExerciseByIdService","id","exercise","postNewExerciseService","name","typology","description","muscles","picture","formData","FormData","append","post","headers"],"sources":["/home/gonzalo/estudios/HAB-bootcamp/proyectos/proyecto-03-mi-borrador/frontend/src/services/exercises.js"],"sourcesContent":["/* Funciones auxiliares para manejar los ejercicios */\n\nimport axios from \"axios\";\n\nconst serverRoot = process.env.REACT_APP_BACKEND_URL;\n\n/* f para recuperar todos los ejercicios del server */\nexport const getExercisesService = async () => {\n  try {\n    const response = await axios.get(`${serverRoot}/exercises`);\n\n    // desestructurar respuesta ; axios incluye varias anidaciones de objetos, por defecto uno llamada \"data\"; el backend tmb devuelve un {data};\n    const { data } = response;\n    const { data: serverData } = data;\n    const { exercises } = serverData;\n\n    // devolver array de objetos tipo ejercicio\n    return exercises;\n  } catch (e) {\n    console.error(e);\n    console.log(e.response.data);\n    return alert(`${e.response.data.status}: ${e.response.data.message}`)\n  }\n};\n\n/* f para recuperar un ejercicio particular del server mediante path param */\nexport const getExerciseByIdService = async (id) => {\n  try {\n    const response = await axios.get(`${serverRoot}/exercises/${id}`);\n\n    // desestructurar respuesta ; axios incluye varias anidaciones de objetos, por defecto uno llamada \"data\"; el backend tmb devuelve un {data};\n    const { data } = response;\n    const { data: exercise } = data;\n\n    // devolver objeto tipo ejercicio\n    return exercise;\n  } catch (e) {\n    console.error(e);\n    console.log(e.response.data);\n    alert(`${e.response.data.status}: ${e.response.data.message}`)\n  }\n};\n\n/* f para grabar nuevo ejercicio en server */\nexport const postNewExerciseService = async ({\n  name,\n  typology,\n  description,\n  muscles,\n  picture,\n}) => {\n  try {\n    const formData = new FormData();\n    formData.append(\"name\", name);\n    formData.append(\"typology\", typology);\n    formData.append(\"description\", description);\n    formData.append(\"muscles\", muscles);\n    formData.append(\"picture\", picture);\n\n    await axios.post(`${serverRoot}/newExercise`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n  } catch (e) {\n    console.error(e.message);\n    console.log(e.response.data);\n    return alert(`${e.response.data.status}: ${e.response.data.message}`)\n  }\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;;AAEpD;AACA,OAAO,MAAMC,mBAAmB,GAAG,YAAY;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,GAAEN,UAAW,YAAW,CAAC;;IAE3D;IACA,MAAM;MAAEO;IAAK,CAAC,GAAGF,QAAQ;IACzB,MAAM;MAAEE,IAAI,EAAEC;IAAW,CAAC,GAAGD,IAAI;IACjC,MAAM;MAAEE;IAAU,CAAC,GAAGD,UAAU;;IAEhC;IACA,OAAOC,SAAS;EAClB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChBC,OAAO,CAACE,GAAG,CAACH,CAAC,CAACL,QAAQ,CAACE,IAAI,CAAC;IAC5B,OAAOO,KAAK,CAAE,GAAEJ,CAAC,CAACL,QAAQ,CAACE,IAAI,CAACQ,MAAO,KAAIL,CAAC,CAACL,QAAQ,CAACE,IAAI,CAACS,OAAQ,EAAC,CAAC;EACvE;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAG,MAAOC,EAAE,IAAK;EAClD,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,GAAEN,UAAW,cAAakB,EAAG,EAAC,CAAC;;IAEjE;IACA,MAAM;MAAEX;IAAK,CAAC,GAAGF,QAAQ;IACzB,MAAM;MAAEE,IAAI,EAAEY;IAAS,CAAC,GAAGZ,IAAI;;IAE/B;IACA,OAAOY,QAAQ;EACjB,CAAC,CAAC,OAAOT,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChBC,OAAO,CAACE,GAAG,CAACH,CAAC,CAACL,QAAQ,CAACE,IAAI,CAAC;IAC5BO,KAAK,CAAE,GAAEJ,CAAC,CAACL,QAAQ,CAACE,IAAI,CAACQ,MAAO,KAAIL,CAAC,CAACL,QAAQ,CAACE,IAAI,CAACS,OAAQ,EAAC,CAAC;EAChE;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,sBAAsB,GAAG,cAMhC;EAAA,IANuC;IAC3CC,IAAI;IACJC,QAAQ;IACRC,WAAW;IACXC,OAAO;IACPC;EACF,CAAC;EACC,IAAI;IACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEP,IAAI,CAAC;IAC7BK,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEN,QAAQ,CAAC;IACrCI,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEL,WAAW,CAAC;IAC3CG,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEJ,OAAO,CAAC;IACnCE,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;IAEnC,MAAM1B,KAAK,CAAC8B,IAAI,CAAE,GAAE7B,UAAW,cAAa,EAAE0B,QAAQ,EAAE;MACtDI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOpB,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,CAAC,CAACM,OAAO,CAAC;IACxBL,OAAO,CAACE,GAAG,CAACH,CAAC,CAACL,QAAQ,CAACE,IAAI,CAAC;IAC5B,OAAOO,KAAK,CAAE,GAAEJ,CAAC,CAACL,QAAQ,CAACE,IAAI,CAACQ,MAAO,KAAIL,CAAC,CAACL,QAAQ,CAACE,IAAI,CAACS,OAAQ,EAAC,CAAC;EACvE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}