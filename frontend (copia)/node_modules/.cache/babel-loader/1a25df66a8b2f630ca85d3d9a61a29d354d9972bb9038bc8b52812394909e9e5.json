{"ast":null,"code":"/* Funciones auxiliares para manejar gestiones sobre usuarios con la bbdd*/\n\nimport axios from \"axios\";\nconst serverRoot = process.env.REACT_APP_BACKEND_URL;\n\n/* f de llamada post de login; devulve token como string */\nexport const postLoginService = async _ref => {\n  let {\n    email,\n    password\n  } = _ref;\n  try {\n    const data = await axios.post(`${serverRoot}/login`, {\n      email: email,\n      password: password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // devolver token como string\n    console.log(`postLoginService - token devuelto: ${data.data.data.userToken}`);\n    return data.data.data.userToken;\n  } catch (e) {\n    // en caso de error emitir alerta con los mensajes q devuleva el servidor\n    console.error(e);\n    alert(`Login fallido - ${e.response.data.status}: ${e.response.data.message}`);\n\n    // y lanzar el error para recoger en la f handleLogingForm\n    throw new Error(`Login fallido - ${e.response.data.status}: ${e.response.data.message}`);\n  }\n};\n\n/* f llamada a get a /currentUser con el token almacenado para recuperar/validar datos/token del usuario;\ndevulve los datos del usuario como un objeto tipo:\n  {\n    \"status\": \"ok - user data recovered\",\n    \"data\": {\n        \"idUser\": 3,\n        \"email\": \"worker2@mail.com\",\n        \"password\": \"$2b$10$3Mp9sN4vuCsObRYArwuuoeKvXDAVliY8Ly4SoQCPj9rdyZ2WV4JYG\",\n        \"role\": \"worker\",\n        \"created\": \"2023-03-01T18:19:18.000Z\"\n    }\n  }\n*/\nexport const getCurrentUserDataService = async _ref2 => {\n  let {\n    token\n  } = _ref2;\n  // formatear header a enviar\n  //const formatedToken = `Bearer ${token}`;\n  // llamada con token en header\n  const response = await axios.get(`${serverRoot}/currentUser`, {\n    headers: {\n      Authorization: token\n    }\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","serverRoot","process","env","REACT_APP_BACKEND_URL","postLoginService","email","password","data","post","headers","console","log","userToken","e","error","alert","response","status","message","Error","getCurrentUserDataService","token","get","Authorization"],"sources":["/home/gonzalo/estudios/HAB-bootcamp/proyectos/proyecto-03-mi-borrador/frontend/src/services/user.js"],"sourcesContent":["/* Funciones auxiliares para manejar gestiones sobre usuarios con la bbdd*/\n\nimport axios from \"axios\";\n\nconst serverRoot = process.env.REACT_APP_BACKEND_URL;\n\n/* f de llamada post de login; devulve token como string */\nexport const postLoginService = async ({ email, password }) => {\n  try {\n    const data = await axios.post(\n      `${serverRoot}/login`,\n      {\n        email: email,\n        password: password,\n      },\n      {\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n\n    // devolver token como string\n    console.log(`postLoginService - token devuelto: ${data.data.data.userToken}`)\n    return data.data.data.userToken;\n  } catch (e) {\n    // en caso de error emitir alerta con los mensajes q devuleva el servidor\n    console.error(e);\n    alert(\n      `Login fallido - ${e.response.data.status}: ${e.response.data.message}`\n    );\n\n    // y lanzar el error para recoger en la f handleLogingForm\n    throw new Error(\n      `Login fallido - ${e.response.data.status}: ${e.response.data.message}`\n    );\n  }\n};\n\n/* f llamada a get a /currentUser con el token almacenado para recuperar/validar datos/token del usuario;\ndevulve los datos del usuario como un objeto tipo:\n  {\n    \"status\": \"ok - user data recovered\",\n    \"data\": {\n        \"idUser\": 3,\n        \"email\": \"worker2@mail.com\",\n        \"password\": \"$2b$10$3Mp9sN4vuCsObRYArwuuoeKvXDAVliY8Ly4SoQCPj9rdyZ2WV4JYG\",\n        \"role\": \"worker\",\n        \"created\": \"2023-03-01T18:19:18.000Z\"\n    }\n  }\n*/\nexport const getCurrentUserDataService = async ({token}) => {\n  // formatear header a enviar\n  //const formatedToken = `Bearer ${token}`;\n  // llamada con token en header\n  const response = await axios.get(`${serverRoot}/currentUser`, {\n    headers: { Authorization: token },\n  });\n\n  return response.data;\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;;AAEpD;AACA,OAAO,MAAMC,gBAAgB,GAAG,cAA+B;EAAA,IAAxB;IAAEC,KAAK;IAAEC;EAAS,CAAC;EACxD,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMR,KAAK,CAACS,IAAI,CAC1B,GAAER,UAAW,QAAO,EACrB;MACEK,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC,EACD;MACEG,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CACF;;IAED;IACAC,OAAO,CAACC,GAAG,CAAE,sCAAqCJ,IAAI,CAACA,IAAI,CAACA,IAAI,CAACK,SAAU,EAAC,CAAC;IAC7E,OAAOL,IAAI,CAACA,IAAI,CAACA,IAAI,CAACK,SAAS;EACjC,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV;IACAH,OAAO,CAACI,KAAK,CAACD,CAAC,CAAC;IAChBE,KAAK,CACF,mBAAkBF,CAAC,CAACG,QAAQ,CAACT,IAAI,CAACU,MAAO,KAAIJ,CAAC,CAACG,QAAQ,CAACT,IAAI,CAACW,OAAQ,EAAC,CACxE;;IAED;IACA,MAAM,IAAIC,KAAK,CACZ,mBAAkBN,CAAC,CAACG,QAAQ,CAACT,IAAI,CAACU,MAAO,KAAIJ,CAAC,CAACG,QAAQ,CAACT,IAAI,CAACW,OAAQ,EAAC,CACxE;EACH;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,yBAAyB,GAAG,eAAmB;EAAA,IAAZ;IAACC;EAAK,CAAC;EACrD;EACA;EACA;EACA,MAAML,QAAQ,GAAG,MAAMjB,KAAK,CAACuB,GAAG,CAAE,GAAEtB,UAAW,cAAa,EAAE;IAC5DS,OAAO,EAAE;MAAEc,aAAa,EAAEF;IAAM;EAClC,CAAC,CAAC;EAEF,OAAOL,QAAQ,CAACT,IAAI;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}