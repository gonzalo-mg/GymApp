{"ast":null,"code":"/* Funciones auxiliares para manejar los ejercicios */\n\nimport axios from \"axios\";\nconst serverRoot = process.env.REACT_APP_BACKEND_URL;\n\n/* f para recuperar todos los ejercicios del server */\nexport const getExercisesService = async _ref => {\n  let {\n    token\n  } = _ref;\n  console.log(`getExercisesService - token: ${token}`);\n  try {\n    const response = await axios.get(`${serverRoot}/exercises`, {\n      headers: {\n        Authorization: token\n      }\n    });\n\n    // desestructurar respuesta ; axios incluye varias anidaciones de objetos, por defecto uno llamada \"data\"; el backend tmb devuelve un {data};\n    const {\n      data\n    } = response;\n    const {\n      data: serverData\n    } = data;\n    const {\n      exercises\n    } = serverData;\n\n    // devolver array de objetos tipo ejercicio\n    return exercises;\n  } catch (e) {\n    console.error(e);\n    console.log(e.response.data);\n    return alert(`${e.response.data.status}: ${e.response.data.message}`);\n  }\n};\n\n/* f para recuperar un ejercicio particular del server mediante path param */\nexport const getExerciseByIdService = async _ref2 => {\n  let {\n    id,\n    token\n  } = _ref2;\n  try {\n    const response = await axios.get(`${serverRoot}/exercises/${id}`, {\n      headers: {\n        Authorization: token\n      }\n    });\n\n    // desestructurar respuesta ; axios incluye varias anidaciones de objetos, por defecto uno llamada \"data\"; el backend tmb devuelve un {data};\n    const {\n      data\n    } = response;\n    const {\n      data: exercise\n    } = data;\n\n    // devolver objeto tipo ejercicio\n    return exercise;\n  } catch (e) {\n    console.error(e);\n    console.log(e.response.data);\n    alert(`${e.response.data.status}: ${e.response.data.message}`);\n  }\n};\n\n/* f para grabar nuevo ejercicio en server */\nexport const postNewExerciseService = async _ref3 => {\n  let {\n    token,\n    name,\n    typology,\n    description,\n    muscles,\n    picture\n  } = _ref3;\n  try {\n    const formData = new FormData();\n    formData.append(\"name\", name);\n    formData.append(\"typology\", typology);\n    formData.append(\"description\", description);\n    formData.append(\"muscles\", muscles);\n    formData.append(\"picture\", picture);\n    await axios.post(`${serverRoot}/newExercise`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `${token}`\n      }\n    });\n  } catch (e) {\n    console.error(e.message);\n    console.log(e.response.data);\n    return alert(`${e.response.data.status}: ${e.response.data.message}`);\n  }\n};","map":{"version":3,"names":["axios","serverRoot","process","env","REACT_APP_BACKEND_URL","getExercisesService","token","console","log","response","get","headers","Authorization","data","serverData","exercises","e","error","alert","status","message","getExerciseByIdService","id","exercise","postNewExerciseService","name","typology","description","muscles","picture","formData","FormData","append","post"],"sources":["/home/gonzalo/estudios/HAB-bootcamp/proyectos/proyecto-03-mi-borrador/frontend/src/services/exercises.js"],"sourcesContent":["/* Funciones auxiliares para manejar los ejercicios */\n\nimport axios from \"axios\";\n\nconst serverRoot = process.env.REACT_APP_BACKEND_URL;\n\n/* f para recuperar todos los ejercicios del server */\nexport const getExercisesService = async ({ token }) => {\n  console.log(`getExercisesService - token: ${token}`)\n  try {\n    const response = await axios.get(`${serverRoot}/exercises`, {\n      headers: { Authorization: token },\n    });\n\n    // desestructurar respuesta ; axios incluye varias anidaciones de objetos, por defecto uno llamada \"data\"; el backend tmb devuelve un {data};\n    const { data } = response;\n    const { data: serverData } = data;\n    const { exercises } = serverData;\n\n    // devolver array de objetos tipo ejercicio\n    return exercises;\n  } catch (e) {\n    console.error(e);\n    console.log(e.response.data);\n    return alert(`${e.response.data.status}: ${e.response.data.message}`);\n  }\n};\n\n/* f para recuperar un ejercicio particular del server mediante path param */\nexport const getExerciseByIdService = async ({ id, token }) => {\n  try {\n    const response = await axios.get(`${serverRoot}/exercises/${id}`, {\n      headers: { Authorization: token },\n    });\n\n    // desestructurar respuesta ; axios incluye varias anidaciones de objetos, por defecto uno llamada \"data\"; el backend tmb devuelve un {data};\n    const { data } = response;\n    const { data: exercise } = data;\n\n    // devolver objeto tipo ejercicio\n    return exercise;\n  } catch (e) {\n    console.error(e);\n    console.log(e.response.data);\n    alert(`${e.response.data.status}: ${e.response.data.message}`);\n  }\n};\n\n/* f para grabar nuevo ejercicio en server */\nexport const postNewExerciseService = async ({\n  token,\n  name,\n  typology,\n  description,\n  muscles,\n  picture,\n}) => {\n  try {\n    const formData = new FormData();\n    formData.append(\"name\", name);\n    formData.append(\"typology\", typology);\n    formData.append(\"description\", description);\n    formData.append(\"muscles\", muscles);\n    formData.append(\"picture\", picture);\n\n    await axios.post(`${serverRoot}/newExercise`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `${token}`,\n      },\n    });\n  } catch (e) {\n    console.error(e.message);\n    console.log(e.response.data);\n    return alert(`${e.response.data.status}: ${e.response.data.message}`);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}