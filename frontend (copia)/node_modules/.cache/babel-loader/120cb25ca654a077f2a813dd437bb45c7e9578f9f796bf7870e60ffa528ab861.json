{"ast":null,"code":"var _jsxFileName = \"/home/gonzalo/estudios/HAB-bootcamp/proyectos/proyecto-03-mi-borrador/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\nimport { getCurrentUserDataService } from \"../services/user\";\nimport { useExerciseNavigation } from \"../hooks/useNavigation\";\n\n// definir objeto global de contexto\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// definir componente proveedor\nexport const AuthContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // definir estado para token; inicialmente recuperar de localStorage si existe\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  // definir estado para usuario; inicialmente nadie\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // efecto para gestionar token en localstorage; refrescar con cambios de estado de token\n  useEffect(() => {\n    localStorage.setItem(\"token\", token);\n    //localStorage.setItem('user', currentUser)\n  }, [token, currentUser]);\n  const {\n    toAnonUserPage\n  } = useExerciseNavigation();\n\n  // f de logout\n  const logout = () => {\n    setToken(\"\");\n    setCurrentUser(null);\n    toAnonUserPage();\n  };\n\n  // f de login\n  const login = token => {\n    setToken(token);\n  };\n\n  // efecto para comprobar datos token y usuario actual con peticion a GET/currentUser\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        // llamar al servicio de recuperar datos del currenUser con el token actual\n        const data = await getCurrentUserDataService(token);\n        setCurrentUser(data);\n      } catch (error) {\n        // si el token no es valido deslogear\n        logout();\n      }\n    };\n    // si hay token hacer peticion\n    if (token) {\n      getUserData();\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      currentUser,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"WK658GVay7kLOSNuLMCMOjH4K0c=\", false, function () {\n  return [useExerciseNavigation];\n});\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","getCurrentUserDataService","useExerciseNavigation","AuthContext","AuthContextProvider","children","token","setToken","localStorage","getItem","currentUser","setCurrentUser","setItem","toAnonUserPage","logout","login","getUserData","data","error"],"sources":["/home/gonzalo/estudios/HAB-bootcamp/proyectos/proyecto-03-mi-borrador/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\nimport { getCurrentUserDataService } from \"../services/user\";\n\nimport { useExerciseNavigation } from \"../hooks/useNavigation\";\n\n// definir objeto global de contexto\nexport const AuthContext = createContext();\n\n// definir componente proveedor\nexport const AuthContextProvider = ({ children }) => {\n  // definir estado para token; inicialmente recuperar de localStorage si existe\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  // definir estado para usuario; inicialmente nadie\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // efecto para gestionar token en localstorage; refrescar con cambios de estado de token\n  useEffect(() => {\n    localStorage.setItem(\"token\", token);\n    //localStorage.setItem('user', currentUser)\n  }, [token, currentUser]);\n\n  const { toAnonUserPage } = useExerciseNavigation();\n\n  // f de logout\n  const logout = () => {\n    setToken(\"\");\n    setCurrentUser(null);\n    toAnonUserPage();\n  };\n\n  // f de login\n  const login = (token) => {\n    setToken(token);\n  };\n\n  // efecto para comprobar datos token y usuario actual con peticion a GET/currentUser\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        // llamar al servicio de recuperar datos del currenUser con el token actual\n        const data = await getCurrentUserDataService(token);\n        setCurrentUser(data);\n      } catch (error) {\n        // si el token no es valido deslogear\n        logout();\n      }\n    };\n    // si hay token hacer peticion\n    if (token) {\n      getUserData();\n    }\n  }, [token]);\n\n  return (\n    <AuthContext.Provider value={{ token, currentUser, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,yBAAyB,QAAQ,kBAAkB;AAE5D,SAASC,qBAAqB,QAAQ,wBAAwB;;AAE9D;AAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,EAAE;;AAE1C;AACA,OAAO,MAAMM,mBAAmB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC9C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAACQ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACAD,SAAS,CAAC,MAAM;IACdS,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;IACpC;EACF,CAAC,EAAE,CAACA,KAAK,EAAEI,WAAW,CAAC,CAAC;EAExB,MAAM;IAAEG;EAAe,CAAC,GAAGX,qBAAqB,EAAE;;EAElD;EACA,MAAMY,MAAM,GAAG,MAAM;IACnBP,QAAQ,CAAC,EAAE,CAAC;IACZI,cAAc,CAAC,IAAI,CAAC;IACpBE,cAAc,EAAE;EAClB,CAAC;;EAED;EACA,MAAME,KAAK,GAAIT,KAAK,IAAK;IACvBC,QAAQ,CAACD,KAAK,CAAC;EACjB,CAAC;;EAED;EACAP,SAAS,CAAC,MAAM;IACd,MAAMiB,WAAW,GAAG,YAAY;MAC9B,IAAI;QACF;QACA,MAAMC,IAAI,GAAG,MAAMhB,yBAAyB,CAACK,KAAK,CAAC;QACnDK,cAAc,CAACM,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAJ,MAAM,EAAE;MACV;IACF,CAAC;IACD;IACA,IAAIR,KAAK,EAAE;MACTU,WAAW,EAAE;IACf;EACF,CAAC,EAAE,CAACV,KAAK,CAAC,CAAC;EAEX,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAEA,KAAK;MAAEI,WAAW;MAAEK,KAAK;MAAED;IAAO,CAAE;IAAA,UAChET;EAAQ;IAAA;IAAA;IAAA;EAAA,QACY;AAE3B,CAAC;AAAC,GAjDWD,mBAAmB;EAAA,QAYHF,qBAAqB;AAAA;AAAA,KAZrCE,mBAAmB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}